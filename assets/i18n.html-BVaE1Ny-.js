import{_ as e,r as o,o as p,c as i,a as s,b as n,d as t,e as c}from"./app-DLikNEkJ.js";const l={},u=s("h1",{id:"translation",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#translation","aria-hidden":"true"},"#"),n(" Translation")],-1),r=s("p",null,[n("Translation around the app is powered by "),s("em",null,"vue-i18n-next"),n(" library. For your convenience, all the translation schemas are typed and will provide you will with all needed autocompletion for the fast work.")],-1),d=s("code",null,"translate",-1),k=s("code",null,"t",-1),m=s("em",null,"vue-i18n-next",-1),v={href:"https://vue-i18n.intlify.dev/guide/essentials/syntax.html",target:"_blank",rel:"noopener noreferrer"},h=c(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> formController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;core/controllers&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> translate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;core/utils&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> formConfig <span class="token operator">=</span> <span class="token function">formController</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  submit<span class="token operator">:</span> <span class="token punctuation">{</span>
    text<span class="token operator">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token string">&#39;patient.submit_button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In here, <code>patient.submit_button</code> is a translation string which is defined in the <code>TranslationSchema</code>. Check how it&#39;s defined in the <code>src/configs/translation/en.ejs</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> enCustom <span class="token operator">=</span> <span class="token punctuation">{</span>
  patient<span class="token operator">:</span> <span class="token punctuation">{</span>
    submit_button<span class="token operator">:</span> <span class="token string">&#39;Submit&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">CustomTranslationSchema</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> enCustom<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> enCustom<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can see that, in the end of the Schema, its type is exported. It is done for other translations. Here is the example with Russian:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> CustomTranslationSchema <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./en&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ruCustom<span class="token operator">:</span> CustomTranslationSchema <span class="token operator">=</span> <span class="token punctuation">{</span>
  patient<span class="token operator">:</span> <span class="token punctuation">{</span>
    submit_button<span class="token operator">:</span> <span class="token string">&#39;Сохранить&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Since we used the English Schema is connected with Russian language, it will have the full power over TypeScript checks. So you will never miss the changed Schema.</p><h2 id="translation-in-custom-views" tabindex="-1"><a class="header-anchor" href="#translation-in-custom-views" aria-hidden="true">#</a> Translation in custom views</h2><p>In custom components, you need to define what to translate by yourself. Use prepared Vue hook for it:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    {{ customT(&#39;hello&#39;, { msg: &#39;WORLD&#39; }) }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span>defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> useTranslate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;core/utils&#39;</span><span class="token punctuation">;</span>
  
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> customT <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useTranslate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        customT<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),b=s("code",null,"customT",-1),g={href:"https://vue-i18n.intlify.dev/guide/essentials/syntax.html",target:"_blank",rel:"noopener noreferrer"},f=s("code",null,"translate",-1);function y(w,_){const a=o("ExternalLinkIcon");return p(),i("div",null,[u,r,s("p",null,[n("You can add translation to any text field in the config files. To do so, you need to import the "),d,n(" function. It accepts all parameters as the "),k,n(" function from "),m,n(". Read about them here: "),s("a",v,[n("https://vue-i18n.intlify.dev/guide/essentials/syntax.html"),t(a)]),n(".")]),h,s("p",null,[b,n(" function accept string and second param (read about it "),s("a",g,[n("in i18n docs"),t(a)]),n(") and returns the value from the "),f,n(" function.")])])}const T=e(l,[["render",y],["__file","i18n.html.vue"]]);export{T as default};
