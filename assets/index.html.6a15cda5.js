import{r as e,o as n,c as o,a,b as s,F as t,d as r,e as i}from"./app.8826f2fc.js";const l={},c=r('<h1 id="magner" tabindex="-1"><a class="header-anchor" href="#magner" aria-hidden="true">#</a> Magner</h1><p>Admin panel that can be used for literally any project.</p><p>It supports authentication, role management, entity tables, entities creation and edition. Easily configurable with JSON highly-typed controllers. Describes proper backend integration.</p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> ci\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>And then use different commands for runs:</p><div class="language-dash ext-dash line-numbers-mode"><pre class="language-dash"><code># For development\nnpm run dev\n\n# For production build and start\nnpm run build\nnpm start\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="file-structure" tabindex="-1"><a class="header-anchor" href="#file-structure" aria-hidden="true">#</a> File structure</h2><p>Basically, this admin panel requires you to follow the structure of the project. The <code>src</code> directory consists of:</p><ul><li><code>envs.ts</code> – File collects all environmental variables. You should provide at least 2 required variables for the project. To configure them, add <code>.env</code> or <code>.env.production</code> to the root of the app</li><li><code>main.ts</code> - Initial project setup. It collects important configuration files and initiates Magner setup. This is the best place to add your project-dependent styles</li><li><code>core</code> – Directory with useful controllers, types, views. Just like a library of tools that you&#39;ll need.</li><li><code>configs</code> – Directory collects JSON configurations for the projects. Use controllers for better Developer Experience (DX).</li><li><code>app</code> – Add your own logic there: requests, views, styles</li></ul><h2 id="problems-and-troubleshooting" tabindex="-1"><a class="header-anchor" href="#problems-and-troubleshooting" aria-hidden="true">#</a> Problems and troubleshooting</h2><blockquote><p>What is this feature for? How should I use this property in the config?</p></blockquote><p>If you ask yourself similar questions while using Magner, please, check the structured documentation links from above. It explains main concepts and shows the usage of different configurations.</p><p>If you need to dive deeper than the documentation, check the TypeScript interfaces: hover over the property in the config and do &quot;Go to definition&quot; in your IDE: CMD+Click in Webstorm, Ctrl+Click in VS Code.</p>',14),d=i("As a last resort, you can open an issue (or discussion) in the repo or contact "),u={href:"https://t.me/vanishmax",target:"_blank",rel:"noopener noreferrer"},p=i("the maintainer"),h=i(" with your problem or proposal.");l.render=function(r,i){const l=e("OutboundLink");return n(),o(t,null,[c,a("p",null,[d,a("a",u,[p,s(l)]),h])],64)};export{l as default};
