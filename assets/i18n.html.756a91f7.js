import{_ as e,o,c as p,a as n,d as t,b as s,e as i,r as c}from"./app.c8aa1904.js";const l={},u=n("h1",{id:"translation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#translation","aria-hidden":"true"},"#"),s(" Translation")],-1),r=n("p",null,[s("Translation around the app is powered by "),n("em",null,"vue-i18n-next"),s(" library. For your convenience, all the translation schemas are typed and will provide you will with all needed autocompletion for the fast work.")],-1),d=s("You can add translation to any text field in the config files. To do so, you need to import the "),k=n("code",null,"translate",-1),m=s(" function. It accepts all parameters as the "),v=n("code",null,"t",-1),h=s(" function from "),b=n("em",null,"vue-i18n-next",-1),g=s(". Read about them here: "),_={href:"https://vue-i18n.intlify.dev/guide/essentials/syntax.html",target:"_blank",rel:"noopener noreferrer"},f=s("https://vue-i18n.intlify.dev/guide/essentials/syntax.html"),y=s("."),w=i(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> formController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;core/controllers&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> translate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;core/utils&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> formConfig <span class="token operator">=</span> <span class="token function">formController</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  submit<span class="token operator">:</span> <span class="token punctuation">{</span>
    text<span class="token operator">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token string">&#39;patient.submit_button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In here, <code>patient.submit_button</code> is a translation string which is defined in the <code>TranslationSchema</code>. Check how it&#39;s defined in the <code>src/configs/translation/en.ejs</code>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> enCustom <span class="token operator">=</span> <span class="token punctuation">{</span>
  patient<span class="token operator">:</span> <span class="token punctuation">{</span>
    submit_button<span class="token operator">:</span> <span class="token string">&#39;Submit&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">CustomTranslationSchema</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> enCustom<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> enCustom<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can see that, in the end of the Schema, its type is exported. It is done for other translations. Here is the example with Russian:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> CustomTranslationSchema <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./en&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ruCustom<span class="token operator">:</span> CustomTranslationSchema <span class="token operator">=</span> <span class="token punctuation">{</span>
  patient<span class="token operator">:</span> <span class="token punctuation">{</span>
    submit_button<span class="token operator">:</span> <span class="token string">&#39;\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Since we used the English Schema is connected with Russian language, it will have the full power over TypeScript checks. So you will never miss the changed Schema.</p><h2 id="translation-in-custom-views" tabindex="-1"><a class="header-anchor" href="#translation-in-custom-views" aria-hidden="true">#</a> Translation in custom views</h2><p>In custom components, you need to define what to translate by yourself. Use prepared Vue hook for it:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    {{ customT(&#39;hello&#39;, { msg: &#39;WORLD&#39; }) }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span>defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> useTranslate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;core/utils&#39;</span><span class="token punctuation">;</span>
  
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> customT <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useTranslate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        customT<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),x=n("code",null,"customT",-1),T=s(" function accept string and second param (read about it "),C={href:"https://vue-i18n.intlify.dev/guide/essentials/syntax.html",target:"_blank",rel:"noopener noreferrer"},S=s("in i18n docs"),I=s(") and returns the value from the "),V=n("code",null,"translate",-1),E=s(" function.");function N(R,q){const a=c("ExternalLinkIcon");return o(),p("div",null,[u,r,n("p",null,[d,k,m,v,h,b,g,n("a",_,[f,t(a)]),y]),w,n("p",null,[x,T,n("a",C,[S,t(a)]),I,V,E])])}var L=e(l,[["render",N],["__file","i18n.html.vue"]]);export{L as default};
