import{r as n,o as s,c as a,a as t,d as p,F as e,b as o,e as l}from"./app.736f000d.js";const c={},u=t("h1",{id:"translation",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#translation","aria-hidden":"true"},"#"),o(" Translation")],-1),r=t("p",null,[o("Translation around the app is powered by "),t("em",null,"vue-i18n-next"),o(" library. For your convenience, all the translation schemas are typed and will provide you will with all needed autocompletion for the fast work.")],-1),i=o("You can add translation to any text field in the config files. To do so, you need to import the "),k=t("code",null,"translate",-1),m=o(" function. It accepts all parameters as the "),d=t("code",null,"t",-1),b=o(" function from "),h=t("em",null,"vue-i18n-next",-1),g=o(". Read about them here: "),f={href:"https://vue-i18n.intlify.dev/guide/essentials/syntax.html",target:"_blank",rel:"noopener noreferrer"},y=o("https://vue-i18n.intlify.dev/guide/essentials/syntax.html"),w=o("."),v=l('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> formController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;core/controllers&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> translate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;core/utils&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> formConfig <span class="token operator">=</span> <span class="token function">formController</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  submit<span class="token operator">:</span> <span class="token punctuation">{</span>\n    text<span class="token operator">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token string">&#39;patient.submit_button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>In here, <code>patient.submit_button</code> is a translation string which is defined in the <code>TranslationSchema</code>. Check how it&#39;s defined in the <code>src/configs/translation/en.ts</code>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> enCustom <span class="token operator">=</span> <span class="token punctuation">{</span>\n  patient<span class="token operator">:</span> <span class="token punctuation">{</span>\n    submit_button<span class="token operator">:</span> <span class="token string">&#39;Submit&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">CustomTranslationSchema</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> enCustom<span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> enCustom<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>You can see that, in the end of the Schema, its type is exported. It is done for other translations. Here is the example with Russian:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> CustomTranslationSchema <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./en&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> ruCustom<span class="token operator">:</span> CustomTranslationSchema <span class="token operator">=</span> <span class="token punctuation">{</span>\n  patient<span class="token operator">:</span> <span class="token punctuation">{</span>\n    submit_button<span class="token operator">:</span> <span class="token string">&#39;Сохранить&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Since we used the English Schema is connected with Russian language, it will have the full power over TypeScript checks. So you will never miss the changed Schema.</p><h2 id="translation-in-custom-views" tabindex="-1"><a class="header-anchor" href="#translation-in-custom-views" aria-hidden="true">#</a> Translation in custom views</h2><p>In custom components, you need to define what to translate by yourself. Use prepared Vue hook for it:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    {{ customT(&#39;hello&#39;, { msg: &#39;WORLD&#39; }) }}\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> <span class="token punctuation">{</span>defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">import</span> <span class="token punctuation">{</span> useTranslate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;core/utils&#39;</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> customT <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useTranslate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      \n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        customT<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',9),x=t("code",null,"customT",-1),T=o(" function accept string and second param (read about it "),C={href:"https://vue-i18n.intlify.dev/guide/essentials/syntax.html",target:"_blank",rel:"noopener noreferrer"},S=o("in i18n docs"),_=o(") and returns the value from the "),I=t("code",null,"translate",-1),R=o(" function.");c.render=function(o,l){const c=n("OutboundLink");return s(),a(e,null,[u,r,t("p",null,[i,k,m,d,b,h,g,t("a",f,[y,p(c)]),w]),v,t("p",null,[x,T,t("a",C,[S,p(c)]),_,I,R])],64)};export{c as default};
